source_file ::= { top_decl } ;

(* decls *)

top_decl ::= func_decl
           | asm_func_decl
           | var_decl
           ;

func_decl     ::= "func" ID "(" [ func_decl_args ] ")" [ expr ] block ;
asm_func_decl ::= "asm" "func" ID "(" [ func_decl_args ] ")" [ expr ] asm_block ;
var_decl      ::= "var" ID [ ":" expr ] "=" expr ";" ;

func_decl_args ::= ID ":" expr [ "," [ func_decl_args ] ] ;

asm_block ::= "{" { STR } "}" ;

(* stmts *)

stmt ::= block
       | expr_stmt
       | return_stmt
       | while_stmt
       | assign
       | var_decl
       ;

block       ::= "{" { stmt } "}" ;
expr_stmt   ::= expr ";" ;
return_stmt ::= "return" expr ";" ;
if_stmt     ::= "if" expr block [ "else" block | if_stmt ];
while_stmt  ::= "while" expr block ;
assign      ::= expr ("=" | "+=" | "-=" | "*=" | "/=") expr ";" ;

(* exprs *)

expr ::= comparison ;

comparison     ::= additive { ("<" | "<=" | ">" | ">=" | "==" | "!=") additive } ;
additive       ::= multiplicative { ("+" | "-") multiplicative } ;
multiplicative ::= call { ("*" | "/") call } ;
call           ::= primary [ "(" call_args ")" ] ;

call_args ::= expr [ "," call_args ] ;

primary ::= ID
          | INT
          | STR
          | "(" expr ")"
          ;

(* terminals *)

ID  ::= [a-zA-Z_][a-zA-Z_0-9]+ ;
INT ::= [0-9][0-9_]+ ;
STR ::= ... ;
