source_file ::= { top_decl } ;

(* decls *)

top_decl ::= func_decl ;

(* TODO: function arguments *)
func_decl ::= "func" ID "(" ")" expr block ;
var_decl  ::= "var" ID [ ":" expr ] "=" expr ";" ;

(* stmts *)

stmt ::= block
       | expr_stmt
       | return_stmt
       | while_stmt
       | assign
       | var_decl
       ;

block       ::= "{" { stmt } "}" ;
expr_stmt   ::= expr ";" ;
return_stmt ::= "return" expr ";" ;
if_stmt     ::= "if" expr block [ "else" block | if_stmt ];
while_stmt  ::= "while" expr block ;
assign      ::= expr ("=" | "+=" | "-=" | "*=" | "/=") expr ";" ;

(* exprs *)

expr ::= comparison ;

comparison     ::= additive [ ("<", "<=", ">", ">=", "==") comparison ;
additive       ::= multiplicative [ ("+" | "-") additive ] ;
multiplicative ::= call [ ("*" | "/") multiplicative ] ;
(* TODO: call arguments *)
call           ::= primary [ "(" ")" ] ;

primary ::= ID
          | INT
          | "(" expr ")"
          ;

(* terminals *)

ID  ::= [a-zA-Z_][a-zA-Z_0-9]+ ;
INT ::= [0-9][0-9_]+ ;
